1) const nestedObj = {
	  a: 1,
	  b: {
		c: 2,
		d: {
		  e: 3
		}
	  },
	  f: [4, 5],
	};
	// Out:- { 'a': 1, 'b.c': 2, 'b.d.e': 3, 'f[0]': 4, 'f[1]': 5 }

	// console.log({...nestedObj})
	console.log(nestedObj.flat(1))



2) const x = {
		a: 10, 
		b: {
			c: 20
		}, 
		d: new Date()
	};
	const y = JSON.parse(JSON.stringify(x));
	y['b']['c'] = 50;
	// console.log(x.b.c);
	console.log(x);

	console.log(y);



3)	console.log("a");     
	 
	setTimeout(() => {
	  console.log("b")
	});
	 
	const promise = new Promise((resolve) => {
		console.log("e");
		resolve("c");
	});
	 
	promise.then((result) => {
		console.log(result);
	});
	 
	console.log("d");

	// // a,d,e,c,b




4) var obj = {
		name: "Ravi", 
		printName: ()=>{
			console.log(this.name);
		}
	}

	let func = obj.printName.bind(obj);
	func();
 

lazy loading router path 

const routes: Routes = [
  { path: 'admin', loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule) }
];

5) let input = "abcdefg"
// Output = "Abcdefg aBcdefg .... abcdefG"
let output= ""

for(let i=0;i<input.length;i++){
    let splitData = input.split('') 
    let data = ''
    for(let j=0;j<splitData.length;j++){
        if(j==i){
            data +=splitData[i].toUpperCase()
        }else{
            data+=splitData[j]
        }
    }
    output += `${data} `
}

console.log(output)

// Deep copy

const obj = {
 name: "ABC",
 address: { city: "Ahmedabad", pin: 380001 },
 hobbies: ["cricket", "coding"],
};
const cloned = deepClone(obj);

function deepClone(input) {
    if(input === null || typeof input !== "object"){
        return input;
    }
    const initiateData = Array.isArray(input) ? [] : {};
    return Object.keys(input).reduce((acc,ini)=>{
        acc[ini]= deepClone(input[ini]);
        return acc;
    },initiateData)
}

cloned.address.city = "Hazaribagh"
console.log(obj);
console.log(cloned); 

What It Doesnâ€™t Handle:
Functions
Dates
Maps, Sets
Circular references
Special objects like RegExp, Error

For full coverage, libraries like Lodash (_.cloneDeep) or structured cloning via structuredClone() (in modern browsers) are recommended.
 
 
 /*
	Write a code to bundle array elements into set of n elements
  Example 1:
  input Array: [1,2,3,4,5,6,7,8,9]
  n = 2
  Output: [[1,2],[3,4],[5,6],[7,8],[9]]
  Example 2:
  input Array: [1,2,3,4,5,6,7,8,9,10]
  n = 3
  Output: [[1,2,3],[4,5,6],[7,8,9],[10]]
*/


const bundleArr = (arr, n) => {
    // let newArr = [];
    // for(let i=0;i<arr.length;i++){
    //     start = i*n
    //     end = start+n
    //     data =  arr.slice(start,end)
    //     if(data.length === 0){
    //         return newArr
    //     }
    //     newArr.push(data);
    // }
    
    // // return data;
   
    for(let i=0;i<arr.length;i++){
        if(i%n==0){
            newArr.push(subArr)
            subArr = [];
        }else{
            subArr.push(arr[i]);
        }
    }
    return newArr;
}

const input1 = [1,2,3,4,5,6,7,8,9];
console.log('Input 1: ', bundleArr(input1, 2));

const input2 = [1,2,3,4,5,6,7,8,9,10];
console.log('Input 2: ', bundleArr(input1, 3));
 
 
09) remove dublicate data from sql data.


10) Truncate and Delete differance
	-> in delete we can remove single row with given where condition.
	-> In truncate we can remove all of the row.
	
11) difference between type and interface
	=> Both can defined to decribe the data 
	interface : - it can be extended/inharitance (two or more) * merge
	Type : - its cannot be extended/inharitance but can be unions & intersaction 
			also a tuples
			
			
12) const myPromise = Promise.resolve('resolved')

const myPro = new Promise((resolve,reject)=>{
	console.log("Data in 2nd promise");
	resolve("Success")
})

async function myAsync() {
	console.log('async started')
  	const result = await myPromise;
 	const result1 = await myPro;
  	console.log(result)
  	console.log(result1)
  	console.log('async ended')
}

console.log('before async')
myAsync()
console.log('after async')



Ques ) let array =  [12, 3, 1, 2, -6, 5, -8, 6], sum = 0;
// output = [[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]];
// two pointer approch
let s = array.sort((a,b)=>a-b)
let result= []
for(let i=0;i<s.length-2;i++){
    let l = i+1
    let r = s.length-1
    while(l<r){
        let sum = s[i]+s[l]+s[r]
        if(sum==0){
            result.push([s[i],s[l],s[r]])
            l++
            r--
        }else if(sum>0){
            r--
        }else{
            l++
        } 
    }
}

console.log(result)




Ques) promise.all with example
	
	const P1 = Promise.resolve(10);
	const P2 = Promise.reject(20);
	const P3 = Promise.resolve(30);
	
	Promise.allSettle([P1,P2,P3]).then((result)=>{
		console.log(result);
	})
	.catch(error=>{
	console.log(error);
	})
	


Ques) Arrow function && normal function
		feature 			Arrow Function				Normal Function
	Shorter syntax				yes							no
	this binding			inherit from outer scope		own
	aegument					not							yes
	use construtor				No							Yes
	Suitable for methods		No							Yes
	Suitable for callbacks		Yes							Yes	
	
	
Ques) Cluster and Worker Threads
	-> The cluster module allows you to spawn multiple Node.js processes (workers) to handle the load.
	-> Each worker is a separate process with its own memory.
	-> Ideal for scaling web servers across CPU cores.
	
	Worker Threads
	-> Introduced in Node.js 10.5+, worker_threads allow you to run JavaScript in parallel threads.hy
	-> Unlike cluster, workers share memory via SharedArrayBuffer	.
	-> Ideal for CPU-intensive tasks (e.g., large calculations, parsing).
	
	
Ques) increase perfomance of nodejs
	1)Use Asynchronous Programming (Non-blocking I/O)
	2)Enable Cluster Module for Multi-core CPUs.
	3)Use worker_threads for CPU-Intensive Tasks.
	4)Implement Caching
	5)Optimize Database Queries
	6)Use Compression & Minification
	7)Limit Payload Sizes
	8)Use a Reverse Proxy (Nginx/Apache)
	9)Lazy Loading and Code Splitting
	10)Avoid Memory Leaks
	11)Use Environment-based Logging
	12)Use HTTP Keep-Alive
	13)Monitor and Profile Regularly
	14)Use Latest Stable Node.js Version
	15)Debounce/Throttle Expensive Operations
	
Ques)Connection pooling
	Connection pooling is a technique used to reuse existing database connections instead of creating a new one for every request. 
	This drastically improves performance, especially in applications with high database traffic.
	
	
let arr = ["ate","abc","eat","chgs","ihd","bca",];

const map = new Map();

for(let word of arr){
  let r = word.split("").sort().join("");
  if(!map.has(r)){
    map.set(r,[]);
  }
  map.get(r).push(word);
}

 console.log(Array.from(map.values()))
